Microsoft (R) Macro Assembler Version 6.15.8803		    12/19/21 12:13:11
C:\Users\mitch\Documents\cs\cs2290\lab10\tron.asm	     Page 1 - 1


				include	Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data


 00000000  00000050 [		board		BYTE	80 dup(1), 28 dup(1, 78 dup(0), 1), 80 dup(1)	; there are 30 rows with 80 columns
	    01
	   ]
	   0000001C [
	    01
	    0000004E [
	     00
	    ] 01
	   ]
	   00000050 [
	    01
	   ]
 00000960 00			ranCol		BYTE	0
 00000961 00			ranRow		BYTE	0
 00000962 00			posY		BYTE	0
 00000963 00			posX		BYTE	0
 00000964 00000000		direct		SDWORD	0
 00000968 00			del 		BYTE	0
 00000969 50			colLen		BYTE	80
 0000096A 00			row			BYTE	?		; This'll be the current row
 0000096B 00			col 		BYTE 	?		; This'll be the current column
 0000096C 0000006E		delayTime	dword	110
 00000970 00000000		score 		dword	0
 00000974 00			obstacleX	BYTE	?		; width
 00000975 00			obstacleY	BYTE	?		; height
 00000976 00			obstacleRow	BYTE	?
 00000977 00			obstacleCol	BYTE	?
 00000978 00			obstacle	BYTE 	?		; where it begins
 00000979 53 63 6F 72 65	msg_Score	BYTE	"Score : ", 0
	   20 3A 20 00
 00000982 4C 65 76 65 6C	msg_Level	BYTE	"Level : ", 0
	   20 3A 20 00
 0000098B 48 69 67 68 20	msg_hScore	BYTE	"High Score: ", 0
	   53 63 6F 72 65
	   3A 20 00
 00000998 53 63 6F 72 65	msg_NScore	BYTE	"Score needed for next level: ", 0
	   20 6E 65 65 64
	   65 64 20 66 6F
	   72 20 6E 65 78
	   74 20 6C 65 76
	   65 6C 3A 20 00
 000009B6 00			level		BYTE	0
 000009B7 00			speedLevel  BYTE	0
 000009B8 00000000		highscore	DWORD	0
 000009BC 00000064		score_need  DWORD 	100

 00000000			.code

 = 00000064			gamespeed = 100 ; Player tick before redrawn.
 = 000000DB			square = 219
 = 00000050			colsinrow = 80

 00000000			main PROC
 00000000  E8 00000000 E		call Randomize
					
 00000005				gameloop:
 00000005  E8 00000000 E			call clrscr
 0000000A  E8 000002C8				call printarray		; draw the underlay
 0000000F  E8 000003D7				call createborder	; create the border
 00000014  B2 00				mov dl, 0
 00000016  B6 21				mov dh, 33
 00000018  E8 00000000 E			call goToXY
 0000001D  BA 00000982 R			mov edx, offset msg_Level
 00000022  E8 00000000 E			call writeString
 00000027  0F B6 05				movzx eax, level
	   000009B6 R
 0000002E  E8 00000000 E			call writeDec
						
						; Skip this part if on level 0
 00000033  0F B6 0D				movzx ecx, level
	   000009B6 R
 0000003A  83 F9 00				cmp ecx, 0
 0000003D  74 0E				je cont
						
 0000003F					Obsticleloop:
 0000003F  51						push ecx
 00000040  E8 0000031D					call obstacleGen
 00000045  E8 000002BB					call drawObst
 0000004A  59						pop ecx
 0000004B  E2 F2				loop Obsticleloop
							
 0000004D					cont:
 0000004D  E8 00000142				call controls 		; This starts the game.

 00000052					NextLevel::
 00000052  E8 00000065				call resetArray
 00000057  0F B6 0D				movzx ecx, level
	   000009B6 R
 0000005E  41					inc ecx
 0000005F  88 0D 000009B6 R			mov level, cl
 00000065  A1 00000970 R			mov eax, score
 0000006A  01 05 000009B8 R			add highscore, eax
 00000070  C7 05 00000970 R			mov score, 0
	   00000000
 0000007A  C7 05 0000096C R			mov delayTime, 120
	   00000078
 00000084  A1 000009BC R			mov eax, score_need
 00000089  83 C0 32				add eax, 50
 0000008C  A3 000009BC R			mov score_need, eax
 00000091  E9 FFFFFF6F			jmp gameloop	
						
 00000096				quiter::
					; Debugging tools for values of the array.
 00000096  E8 00000000 E		call clrscr
 0000009B  BA 00000979 R		mov edx, offset msg_Score
 000000A0  E8 00000000 E		call writeString
 000000A5  A1 000009B8 R		mov eax, highscore
 000000AA  03 05 00000970 R		add eax, score
 000000B0  E8 00000000 E		call writeDec
					
					exit
 000000BC			main ENDP

 000000BC			resetArray PROC
 000000BC  B9 00000960			mov ecx, lengthof board
 000000C1  BE 00000000 R		mov esi, offset board
 000000C6				L1:
 000000C6  C6 06 00				mov byte ptr [esi], 0
 000000C9  46					inc esi
 000000CA  E2 FA			loop L1
 000000CC  C3				ret
 000000CD			resetArray ENDP

 000000CD			checkIfGood PROC
 000000CD  60				pushad
 000000CE  BE 00000000 R		mov esi, offset board
 000000D3  0F B6 0D			movzx ecx, posY
	   00000962 R
 000000DA  41				inc ecx
					
 000000DB				L1:
 000000DB  83 C6 50				add esi, colsinrow
 000000DE  E2 FB			loop L1
					
 000000E0  0F B6 1D			movzx ebx, posX
	   00000963 R
 000000E7  03 F3			add esi, ebx
 000000E9  80 3E 01			cmp byte ptr [esi], 1
 000000EC  72 02			jb goodMove
 000000EE  EB A6			jmp quiter	; Bad move.
					
 000000F0				goodMove:	; The array didn't have a 1 at that location
 000000F0  B8 0000000A			mov eax, 10
 000000F5  E8 00000000 E		call Delay
 000000FA  FE 06			inc byte ptr [esi]
 000000FC  8B 0D 00000970 R		mov ecx, score
 00000102  41				inc ecx
 00000103  89 0D 00000970 R		mov score, ecx
					; Update values that are wring to the screen.
 00000109  B2 00			mov dl, 0
 0000010B  B6 20			mov dh, 32 
 0000010D  E8 00000000 E		call goToXY
 00000112  BA 00000979 R		mov edx, offset msg_Score
 00000117  E8 00000000 E		call writeString
 0000011C  A1 00000970 R		mov eax, score
 00000121  E8 00000000 E		call writeDec
 00000126  B2 00			mov dl, 0
 00000128  B6 21			mov dh, 33 
 0000012A  E8 00000000 E		call goToXY
 0000012F  BA 00000998 R		mov edx, offset msg_NScore
 00000134  E8 00000000 E		call writeString
 00000139  A1 000009BC R		mov eax, score_need
 0000013E  2B 05 00000970 R		sub eax, score
 00000144  E8 00000000 E		call writeDec
 00000149  61				popad	
 0000014A  C3				ret
 0000014B			checkIfGood ENDP

 0000014B			draw PROC
 0000014B  60				pushad
 0000014C  E8 FFFFFF7C			call checkIfGood
					
					; begining condition
 00000151  8A 15 00000963 R		mov dl, posX
 00000157  8A 35 00000962 R		mov dh, posY
 0000015D  E8 00000000 E		call goToXY
					
 00000162  B8 00000001			mov eax, blue + (black * 16)
 00000167  E8 00000000 E		call setTextColor
 0000016C  B0 DB			mov al, square
 0000016E  E8 00000000 E		call writeChar
 00000173  A1 0000096C R		mov eax, delayTime
 00000178  83 F8 00			cmp eax, 0
 0000017B  7E 0B			jle done 
 0000017D  48				dec eax
 0000017E  A3 0000096C R		mov delayTime, eax
 00000183  E8 00000000 E		call Delay			; delay looking drawing char
 00000188				done:
 00000188  B8 0000000F			mov eax, white + (black * 16)
 0000018D  E8 00000000 E		call setTextColor
					
 00000192  61				popad
 00000193  C3				ret
 00000194			draw ENDP

 00000194			controls PROC
					; With respect to the offset:
					; going up is -80 and going down is +80
					; going left is -1 and going right is +1.
					; The row boundry is 0 or 29 while the Col boundry is 0 or 79.
					; When a key is pressed, the character continues until the course is altered.
 00000194  E8 00000100			call spawn
 00000199  E8 FFFFFFAD			call draw			; First draw call.
					
 0000019E				Begin:
					
 0000019E  50					push eax
 0000019F  52					push edx
 000001A0  A1 00000970 R			mov eax, score
 000001A5  3B 05 000009BC R			cmp eax, score_need 
 000001AB  0F 83 FFFFFEA1			jae NextLevel
 000001B1  5A					pop edx
 000001B2  B8 0000000A				mov eax, 10
 000001B7  E8 00000000 E			call delay
 000001BC  E8 00000000 E			call readKey
 000001C1  58					pop eax	
							
 000001C2  66| 83 FA 25				cmp dx, VK_LEFT
 000001C6  74 2F				je left
 000001C8  66| 83 FA 28				cmp dx, VK_DOWN
 000001CC  74 41				je down
 000001CE  66| 83 FA 26				cmp dx, VK_UP
 000001D2  74 2F				je up
 000001D4  66| 83 FA 27				cmp dx, VK_RIGHT
 000001D8  74 11				je right
 000001DA  66| 83 FA 20				cmp dx, VK_SPACE
 000001DE  74 3B				je space
						
						; This check is for when a key hasn't been pressed
 000001E0  83 3D 00000964 R			cmp direct, 0
	   00
 000001E7  7F 3C				jg contPos
 000001E9  7C 6F				jl contNeg
 000001EB				right:
 000001EB  B8 00000001				mov eax, 1
 000001F0  A3 00000964 R			mov direct, eax
 000001F5  EB 2E				jmp contPos
 000001F7				left:
 000001F7  B8 FFFFFFFF				mov eax, -1
 000001FC  A3 00000964 R			mov direct, eax
 00000201  EB 57				jmp contNeg
 00000203				up:
 00000203  B8 FFFFFFB0				mov eax, -80
 00000208  A3 00000964 R			mov direct, eax
 0000020D  EB 4B				jmp contNeg
 0000020F				down:
 0000020F  B8 00000050				mov eax, 80
 00000214  A3 00000964 R			mov direct, eax
 00000219  EB 27				jmp yInc
 0000021B				space: 
 0000021B  E8 00000231				call pauseP
 00000220  E9 FFFFFF79				jmp Begin
					; posX and posY are used for tracking a draw location. 
					; currOffset is used for updating the array as to which position in memory
					; needs to be set to 1. It's also used for checking whether it's a bad/good move.
					
					; Going down or right.
 00000225				contPos:
							; right
 00000225  83 F8 01					cmp eax, 1
 00000228  75 18					jne yInc
 0000022A  8A 1D 00000963 R				mov bl, posX
 00000230  FE C3					inc bl
 00000232  88 1D 00000963 R				mov posX, bl
 00000238  E8 FFFFFF0E					call draw
 0000023D  E9 FFFFFF5C					jmp Begin
						; down
 00000242					yInc:
 00000242  8A 1D 00000962 R				mov bl, posY
 00000248  FE C3					inc bl
 0000024A  88 1D 00000962 R				mov posY, bl
 00000250  E8 FFFFFEF6					call draw
 00000255  E9 FFFFFF44					jmp Begin
					
					; Going up or left.
 0000025A				contNeg:
							; left
 0000025A  83 F8 FF					cmp eax, -1
 0000025D  7C 18					jl yDec
 0000025F  8A 1D 00000963 R				mov bl, posX
 00000265  FE CB					dec bl
 00000267  88 1D 00000963 R				mov posX, bl
 0000026D  E8 FFFFFED9					call draw
 00000272  E9 FFFFFF27					jmp Begin
						
 00000277					yDec:
							; down
 00000277  8A 1D 00000962 R				mov bl, posY
 0000027D  FE CB					dec bl
 0000027F  88 1D 00000962 R				mov posY, bl
 00000285  E8 FFFFFEC1					call draw
 0000028A  E9 FFFFFF0F					jmp Begin
					
 0000028F				gameova:
 0000028F  B6 28				mov dh, 40
 00000291  B2 00				mov dl, 0
 00000293  E8 00000000 E			call goToXY
 00000298  C3				ret
 00000299			controls ENDP

 00000299			spawn PROC
					; Determine a random row & column within predefined boundries.
					
					; random row 10 - 15
 00000299  B8 00000005			mov eax, 5
 0000029E  E8 00000000 E		call randomRange
 000002A3  83 C0 0A			add eax, 10
 000002A6  A2 00000962 R		mov posY, al
					; random columns 35 - 40
 000002AB  B8 00000005			mov eax, 5
 000002B0  E8 00000000 E		call randomRange
 000002B5  83 C0 23			add eax, 35
 000002B8  A2 00000963 R		mov posX, al
					; Set player start position
 000002BD  0F B6 1D			movzx ebx, colLen
	   00000969 R
 000002C4  0F B6 0D			movzx ecx, posY
	   00000962 R
 000002CB  BE 00000000 R		mov esi, offset board
 000002D0  41				inc ecx
 000002D1				L1: 
 000002D1  83 C6 50				add esi, colsinrow
 000002D4  E2 FB			loop L1
					
 000002D6  C3				ret
 000002D7			spawn ENDP


 000002D7			printarray PROC
 000002D7  BE 00000000			mov esi, 0
 000002DC  B9 00000000			mov ecx, 0
 000002E1				print:
 000002E1  83 F9 50				cmp ecx, 80		; Check for when to put a crlf
 000002E4  75 0A				jne cont
 000002E6  B9 00000000				mov ecx, 0
 000002EB  E8 00000000 E			call crlf
 000002F0				cont:
 000002F0  0F B6 86				movzx eax, board[esi]
	   00000000 R
 000002F7  83 F8 00				cmp eax, 0
						;call writeDec  ; Enable for debugging.
 000002FA  46					inc esi
 000002FB  41					inc ecx
 000002FC  81 FE 00000960			cmp esi, lengthof board
 00000302  72 DD			jb print
					
 00000304  C3				ret
 00000305			printarray ENDP

 00000305			drawObst PROC
 00000305  B8 00000004			mov  eax, red+(black*16)
 0000030A  E8 00000000 E	    call SetTextColor
					
 0000030F  8A 35 00000976 R		mov dh, obstacleRow
 00000315  8A 15 00000977 R		mov dl, obstacleCol
 0000031B  E8 00000000 E		call goToXY
 00000320  B8 000000DB			mov eax, square
 00000325  0F B6 0D			movzx ecx, obstacleY
	   00000975 R
 0000032C				L1:
 0000032C  51					push ecx
 0000032D  0F B6 0D				movzx ecx, obstacleX
	   00000974 R
 00000334					inner:
 00000334  B0 DB					mov al, square
 00000336  E8 00000000 E				call writeChar
 0000033B  B8 0000000A					mov eax, 10
 00000340  E8 00000000 E				call delay
 00000345  E2 ED				loop inner
						
 00000347  FE C6				inc dh
 00000349  8A 15 00000977 R			mov dl, obstacleCol
 0000034F  E8 00000000 E			call goToXY	
 00000354  59					pop ecx
 00000355  E2 D5			loop L1
					
 00000357  B8 0000000F			mov  eax, white+(black*16)
 0000035C  E8 00000000 E	    call SetTextColor
					
 00000361  C3				ret
 00000362			drawObst ENDP


 00000362			obstacleGen PROC
					; Can't be within the player spawn area
						
					; Generate the size of the obstacle
 00000362  B8 00000006			mov eax, 6
 00000367  E8 00000000 E		call RandomRange
 0000036C  83 C0 04			add eax, 4
 0000036F  A2 00000974 R		mov obstacleX, al
					
 00000374  B8 00000006			mov eax, 6
 00000379  E8 00000000 E		call RandomRange
 0000037E  83 C0 04			add eax, 4
 00000381  A2 00000975 R		mov obstacleY, al
					
 00000386  B8 0000000F			mov eax, 15
 0000038B  E8 00000000 E		call randomRange
 00000390  83 C0 04			add eax, 4
 00000393  A2 00000976 R		mov obstacleRow, al
					
					; Avoid rows where player spawns, 10 -15
 00000398  3C 0F			cmp al, 15
 0000039A  77 06			ja good
 0000039C  3C 01			cmp al, 1
 0000039E  76 02			jbe	good
 000003A0  04 0D			add al, 13
					
					; Now I put the values into the array
 000003A2				good:
					
 000003A2  0F B6 0D			movzx ecx, obstacleRow
	   00000976 R
 000003A9  41				inc ecx
 000003AA  BE 00000000 R		mov esi, offset board
 000003AF				getToRow:
 000003AF  83 C6 50				add esi, 80
 000003B2  E2 FB			loop getToRow
					
 000003B4  B8 00000045			mov eax, 69 ; Rectangle is max 10.
 000003B9  E8 00000000 E		call randomRange
 000003BE  40				inc eax
 000003BF  A2 00000977 R		mov obstacleCol, al
					
 000003C4  03 F0			add esi, eax
					
 000003C6  0F B6 0D			movzx ecx, obstacleY
	   00000975 R
 000003CD				outer:
 000003CD  51					push ecx
 000003CE  0F B6 0D				movzx ecx, obstacleX
	   00000974 R
 000003D5					L1: 
 000003D5  80 06 01					add byte ptr [esi], 1
 000003D8  46						inc esi
 000003D9  E2 FA				loop L1
						
 000003DB  59					pop ecx
 000003DC  83 C6 50				add esi, 80
					
 000003DF  0F B6 1D				movzx ebx, obstacleX
	   00000974 R
 000003E6  2B F3				sub esi, ebx
 000003E8  E2 E3			loop outer
					
 000003EA  C3				ret
 000003EB			obstacleGen ENDP

 000003EB			createborder PROC
 000003EB  B8 00000077			mov  eax, lightGray+(lightGray*16)
 000003F0  E8 00000000 E	    call SetTextColor
					
 000003F5  B6 00			mov dh, 0 
 000003F7  B2 00			mov dl, 0
 000003F9  E8 00000000 E		call goToXY
 000003FE				drawBorderTop:	
 000003FE  B0 DB				mov al, square
 00000400  E8 00000000 E			call writeChar
 00000405  FE C2				inc dl
 00000407  80 FA 4F				cmp dl, 79
 0000040A  76 F2			jbe drawBorderTop
					
					;Draw at 0 and 79 columns then go to next row.
 0000040C				drawmid:
 0000040C  FE C6				inc dh
 0000040E  B2 00				mov dl, 0
 00000410  E8 00000000 E			call goToXY
 00000415  B0 DB				mov al, square
 00000417  E8 00000000 E			call writeChar
 0000041C  B2 4F				mov dl, 79
 0000041E  E8 00000000 E			call goToXY
 00000423  B0 DB				mov al, square
 00000425  E8 00000000 E			call writeChar
 0000042A  80 FE 1C				cmp dh, 28
 0000042D  72 DD			jb drawmid
					
					; Draw final row of the border.
 0000042F  B6 1D			mov dh, 29
 00000431  B2 00			mov dl, 0
 00000433  E8 00000000 E		call goToXY
 00000438				drawBorderBottom:
 00000438  B0 DB				mov al, square
 0000043A  E8 00000000 E			call writeChar
 0000043F  FE C2				inc dl
 00000441  80 FA 4F				cmp dl, 79
 00000444  76 F2			jbe drawBorderBottom	
					
 00000446  B8 0000000F			mov  eax, white+(black*16)
 0000044B  E8 00000000 E	    call SetTextColor
					
 00000450  C3				ret
 00000451			createborder ENDP

				;Run pause procedure until user hits it again.
 00000451			pauseP PROC
					
 00000451				paused:	
 00000451  B8 0000000A				mov eax, 10
 00000456  E8 00000000 E			call Delay
 0000045B  E8 00000000 E			call readKey
 00000460  74 EF				jz paused		; There's no point executing the following code if no key is pressed
 00000462  66| 83 FA 1B				cmp dx, VK_ESCAPE	
 00000466  0F 84 FFFFFC2A			je quiter	
 0000046C  66| 83 FA 20				cmp dx, VK_SPACE
 00000470  75 DF			jne paused	; If key is not pressed, then it jumps again.

 00000472  C3				ret
 00000473			pauseP ENDP

				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    12/19/21 12:13:11
C:\Users\mitch\Documents\cs\cs2290\lab10\tron.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000009C0 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000473 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkIfGood  . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 0000007E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000DB _TEXT	
  goodMove . . . . . . . . . . .	L Near	 000000F0 _TEXT	
controls . . . . . . . . . . . .	P Near	 00000194 _TEXT	Length= 00000105 Public STDCALL
  Begin  . . . . . . . . . . . .	L Near	 0000019E _TEXT	
  right  . . . . . . . . . . . .	L Near	 000001EB _TEXT	
  left . . . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  up . . . . . . . . . . . . . .	L Near	 00000203 _TEXT	
  down . . . . . . . . . . . . .	L Near	 0000020F _TEXT	
  space  . . . . . . . . . . . .	L Near	 0000021B _TEXT	
  contPos  . . . . . . . . . . .	L Near	 00000225 _TEXT	
  yInc . . . . . . . . . . . . .	L Near	 00000242 _TEXT	
  contNeg  . . . . . . . . . . .	L Near	 0000025A _TEXT	
  yDec . . . . . . . . . . . . .	L Near	 00000277 _TEXT	
  gameova  . . . . . . . . . . .	L Near	 0000028F _TEXT	
createborder . . . . . . . . . .	P Near	 000003EB _TEXT	Length= 00000066 Public STDCALL
  drawBorderTop  . . . . . . . .	L Near	 000003FE _TEXT	
  drawmid  . . . . . . . . . . .	L Near	 0000040C _TEXT	
  drawBorderBottom . . . . . . .	L Near	 00000438 _TEXT	
drawObst . . . . . . . . . . . .	P Near	 00000305 _TEXT	Length= 0000005D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000032C _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000334 _TEXT	
draw . . . . . . . . . . . . . .	P Near	 0000014B _TEXT	Length= 00000049 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 00000188 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BC Public STDCALL
  gameloop . . . . . . . . . . .	L Near	 00000005 _TEXT	
  Obsticleloop . . . . . . . . .	L Near	 0000003F _TEXT	
  cont . . . . . . . . . . . . .	L Near	 0000004D _TEXT	
obstacleGen  . . . . . . . . . .	P Near	 00000362 _TEXT	Length= 00000089 Public STDCALL
  good . . . . . . . . . . . . .	L Near	 000003A2 _TEXT	
  getToRow . . . . . . . . . . .	L Near	 000003AF _TEXT	
  outer  . . . . . . . . . . . .	L Near	 000003CD _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000003D5 _TEXT	
pauseP . . . . . . . . . . . . .	P Near	 00000451 _TEXT	Length= 00000022 Public STDCALL
  paused . . . . . . . . . . . .	L Near	 00000451 _TEXT	
printarray . . . . . . . . . . .	P Near	 000002D7 _TEXT	Length= 0000002E Public STDCALL
  print  . . . . . . . . . . . .	L Near	 000002E1 _TEXT	
  cont . . . . . . . . . . . . .	L Near	 000002F0 _TEXT	
resetArray . . . . . . . . . . .	P Near	 000000BC _TEXT	Length= 00000011 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000C6 _TEXT	
spawn  . . . . . . . . . . . . .	P Near	 00000299 _TEXT	Length= 0000003E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002D1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NextLevel  . . . . . . . . . . .	L Near	 00000052 _TEXT	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
colLen . . . . . . . . . . . . .	Byte	 00000969 _DATA	
colsinrow  . . . . . . . . . . .	Number	 00000050h   
col  . . . . . . . . . . . . . .	Byte	 0000096B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delayTime  . . . . . . . . . . .	DWord	 0000096C _DATA	
del  . . . . . . . . . . . . . .	Byte	 00000968 _DATA	
direct . . . . . . . . . . . . .	DWord	 00000964 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gamespeed  . . . . . . . . . . .	Number	 00000064h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
highscore  . . . . . . . . . . .	DWord	 000009B8 _DATA	
level  . . . . . . . . . . . . .	Byte	 000009B6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg_Level  . . . . . . . . . . .	Byte	 00000982 _DATA	
msg_NScore . . . . . . . . . . .	Byte	 00000998 _DATA	
msg_Score  . . . . . . . . . . .	Byte	 00000979 _DATA	
msg_hScore . . . . . . . . . . .	Byte	 0000098B _DATA	
obstacleCol  . . . . . . . . . .	Byte	 00000977 _DATA	
obstacleRow  . . . . . . . . . .	Byte	 00000976 _DATA	
obstacleX  . . . . . . . . . . .	Byte	 00000974 _DATA	
obstacleY  . . . . . . . . . . .	Byte	 00000975 _DATA	
obstacle . . . . . . . . . . . .	Byte	 00000978 _DATA	
posX . . . . . . . . . . . . . .	Byte	 00000963 _DATA	
posY . . . . . . . . . . . . . .	Byte	 00000962 _DATA	
quiter . . . . . . . . . . . . .	L Near	 00000096 _TEXT	
ranCol . . . . . . . . . . . . .	Byte	 00000960 _DATA	
ranRow . . . . . . . . . . . . .	Byte	 00000961 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 0000096A _DATA	
score_need . . . . . . . . . . .	DWord	 000009BC _DATA	
score  . . . . . . . . . . . . .	DWord	 00000970 _DATA	
speedLevel . . . . . . . . . . .	Byte	 000009B7 _DATA	
square . . . . . . . . . . . . .	Number	 000000DBh   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
